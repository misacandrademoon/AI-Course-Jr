# Creación de un precepton.
##By: Misac Andrade Luna

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Perceptron
from sklearn.metrics import accuracy_score

# Datos de entrenamiento (x1, x2)
X = np.array([[0, 0],
              [1, 0],
              [1, 1],
              [2, 1],
              [2, 2],
              [3, 4],
              [2, 3],
              [5, 7],
              [4, 4]])

# Targets (0 to 1)
y = np.array([0, 0, 0, 0, 0, 1, 1, 1, 0])

# Crear el perceptrón
perceptron = Perceptron()

# Entrenar el perceptrón con los datos
perceptron.fit(X, y)
# Predecir las etiquetas para los datos de entrenamiento
y_pred = perceptron.predict(X)

# Calcular la exactitud (accuracy)
accuracy = accuracy_score(y, y_pred)
print(f"Exactitud (Accuracy): {accuracy * 100:.2f}%")

# Crear una malla para graficar la frontera de decisión
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01),
                     np.arange(y_min, y_max, 0.01))

# Predecir la clase para cada punto en la malla
Z = perceptron.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Graficar la frontera de decisión y los puntos de entrenamiento
plt.contourf(xx, yy, Z, alpha=0.8)
plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', marker='o')
plt.xlabel('x1')
plt.ylabel('x2')
plt.title('Frontera de Decisión del Perceptrón')
plt.show()
